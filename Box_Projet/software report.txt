Program 1: all_MAW.py
    This program detects Minimal Absent Words (MAWs) in DNA sequences extracted from a FASTA file.

    The core structure of the code is built around the following key functions:
        fasta_to_seq_list(): Reads a FASTA file and extracts DNA sequences.
        reverse_complement(): Computes the reverse complement of a DNA sequenc.
        suffix_array() and suffix_tree(): Constructs essential data structures to efficiently search for absent patterns in the DNA sequences.
        all_potential_MAW(): Identifies potentially absent patterns between two suffixes in the suffix array.
        verify_MAW(): Verifies that a given pattern is a MAW by ensuring that its sub-patterns are present in the DNA sequence.
        write_MAW_to_TSV(): Writes the identified MAWs to a TSV file for further processing.

    The program takes a FASTA file as input and outputs a TSV file containing the detected MAWs, sorted by their length.
    
    This program also makes extensive use of dictionaries to organize and optimize the storage of MAWs by length.
    This approach significantly reduces the search time for patterns during verification.

Program 2: all_pMAW.py
    This program identifies p-MAWs based on the results generated by the first program.
    It uses a threshold parameter p to determine patterns that are absent across a proportion of the input DNA sequences.

    The key functions in this program include:
        reverse_complement(): Computes the reverse complement of a DNA sequence to ensure both strands are covered.
            In this program, we only work with the canonical sequence of each pattern to avoid redundancies.
        create_dict_per_length(): Organizes the MAWs by their length using dictionaries, making it easier to handle and filter patterns.
        pre_count_AW(): Pre-counts the absent patterns using a caching mechanism to avoid redundant calculations.
        all_potential_pMAW(): Searches for potential p-MAWs by extending the previously identified MAWs.
        verify_pMAW(): Verifies that a given pattern is a valid p-MAW by checking its presence and the presence of its substrings across the input DNA sequences.
        write_MAW_to_TSV(): Writes the identified p-MAWs to a TSV file.

    The program outputs two key performance parameters to evaluate the efficiency of the p-MAW detection process:
        γ (gamma): The proportion of valid patterns among all tested patterns.
        δ (delta): The average number of new patterns generated for each valid pattern.

    The second program also uses bit arrays to efficiently handle sequence flags, allowing quick operations on large sets of DNA sequences.
